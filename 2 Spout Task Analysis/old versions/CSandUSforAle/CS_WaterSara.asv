function CS_WaterSara
%% GoNoGo is for behavior trainning
% 1:reward approaching; 2:reference cue; 0:active avoidance
% SETUP
% > Connect the water valve in the box to Bpod Port#1.
% > Connect the air valve in the box to Bpod Port#2.
% > Lick: Bpod Port#3
% > Running: Wire 1 (input)
% > Imaging: Wire 1 (output)
% > BNC1: ArchT laser
% > BNC2: ChR2 laser
clear
global BpodSystem
global S
global currentTrial
type = 1; %1 is water only, 2 is airpuff only, 3 is water and airpuff intermixed
%% Define parameters
%% Define parameters
nTrials = 50;
S = BpodSystem.ProtocolSettings; % Load settings chosen in launch manager into current workspace as a struct called S
if isempty(fieldnames(S))  % If settings file was an empty struct, populate struct with default settings
    S.GUI.RewardAmount = 5; % ul
    S.GUI.PunishAmount = 0.2; % s (air puff)
    S.ImagingFlag = 1; %1 for yes 0 for none
    S.RndFlag = 1; % Deploy the random trials or repeat a list of trials. 
    S.NonrandomMaxTrials = nTrials; %Total number of trials to run. This should not exceed the limit of the grapher (BpodSystem.PluginObjects.maxTrials)
    if S.RndFlag == 0
        NumTrial = (S.NonrandomMaxTrials-23)/3;
        S.NonrandomSequence = [zeros(1,NumTrial),ones(1,NumTrial)]; % If nonrandom, sequence of the trials to run. 
    end
    S.ReTeaching = 0;
	S.GUI.AssistProb = 0; %when this is set to 0, mouse doesn't get reward if it doesn't lick. When set to .5, it gets reward half the time regardless of mistake. 
    S.GUI.TrainingLevel = 2; %1 is CS + water. 2 
    % prob = S.GUI.AssistProb
    S.GUI.PreGoTrialNum = 0;
    S.GUI.BaselineTime = 3;
    S.arduinoPort = 'COM12'; % Port (USB) of the wheel run sensor Arduino
	S.wheelCirc = 46; % Circumference of the wheel (cm)
	S.wheelTicks = 1024; % Number of ticks recorded by the wheel per rotation.
	S.wheelMult = S.wheelCirc/S.wheelTicks; % Distance per tick (cm)
    %Attempt to connect to the Arduino run detector. 
	BpodSystem.PluginObjects.ardSerial = serial(S.arduinoPort);
    BPAS = BpodSystem.PluginObjects.ardSerial;
	BPAS.InputBufferSize = 16000; % read up to 2kb
	set(BPAS,'DataBits',8);
	set(BPAS,'StopBits',1);
	set(BPAS,'BaudRate',115200);
	set(BPAS,'Parity','none');
	fopen(BPAS);
	autoCleanup = onCleanup(@()fclose(BPAS));

    
    S.GUI.ResponseTimeGo = 2; % How long until the mouse must make a choice, or forefeit the trial
	S.GUI.ResponseTimeNoGo = 2; % How long until the mouse must make a choice, or forefeit the trial
	S.GUI.ResponseTimeNoGoDelay = 0; %Wait before punishing the mouse.
    
    S.GUIMeta.TrainingLevel.Style = 'popupmenu'; % the GUIMeta field is used by the ParameterGUI plugin to customize UI objects.
    S.GUIMeta.TrainingLevel.String = {'Habitation','Active Avoidance','Imaging Active Avoidance'};
        
    S.GUI.PunishDelayMean = 0;
    S.PunishDelayMax = 0;
    S.PunishDelayMin = 0;
    S.GUI.RewardDelayMean = 0;
    S.RewardDelayMax = 0;
    S.RewardDelayMin = 0;

    S.CueDelay = 0; % the time from cue to response
    S.ITI = 8;
    S.ITI_min = 5; S.ITI_max = 11;
    S.SoundDuration = 1.0;
end

S.wheelCirc = 46; % Circumference of the wheel (cm)
S.wheelTicks = 1024; % Number of ticks recorded by the wheel per rotation.
S.wheelMult = S.wheelCirc/S.wheelTicks; % Distance per tick (cm)
LickPort = 'Port3In';
RunPort = 'Wire1High';
RewardValveState = 1;
PunishValveState = 2;

% Initialize parameter GUI plugin
BpodParameterGUI('init', S);
TotalRewardDisplay('init');


%% Define trials
if (~S.RndFlag && BpodSystem.PluginObjects.maxTrials < S.NonrandomMaxTrials)
    MaxTrials = BpodSystem.PluginObjects.maxTrials;
else
    MaxTrials = S.NonrandomMaxTrials;
end


% Randomise the training conditions. 
if type == 3 %If water and airpuff 
    if  S.RndFlag
        RandNumber = randperm(nTrials);
        TrialTypes =  mod(RandNumber,2);
        if TrialTypes(1)==2
            RandNumber = randperm(nTrials);
            TrialTypes =  mod(RandNumber,2);
        end
    else    
        disp('Using nonrandom trial list.')
        TrialTypes = [zeros(NumTrial,1);ones(NumTrial,1)];
    end
elseif type == 2 % if airpuff
        TrialTypes = ones(1, nTrials);
elseif type == 1 %if water only
    TrialTypes = zeros(1, nTrials);
end

R = repmat(S.GUI.PunishDelayMean,1,nTrials);
if S.PunishDelayMax>S.PunishDelayMin
    for k=1:nTrials
        candidate_delay = exprnd(S.GUI.PunishDelayMean);
        while candidate_delay>S.PunishDelayMax || candidate_delay<S.PunishDelayMin
            candidate_delay = exprnd(S.GUI.PunishDelayMean);
        end
        R(k) = candidate_delay;
    end
end
PunishDelay = R;

R = repmat(S.GUI.RewardDelayMean,1,nTrials);
if S.RewardDelayMax>S.RewardDelayMin
    for k=1:nTrials
        candidate_delay = exprnd(S.GUI.RewardDelayMean);
        while candidate_delay>S.RewardDelayMax || candidate_delay<S.RewardDelayMin
            candidate_delay = exprnd(S.GUI.RewardDelayMean);
        end
        R(k) = candidate_delay;
    end
end
RewardDelay = R;

R = repmat(S.ITI,1,nTrials);
for k=1:nTrials
    candidate_delay = exprnd(S.ITI);
    while candidate_delay>S.ITI_max || candidate_delay<S.ITI_min
        candidate_delay = exprnd(S.ITI);
    end
    R(k) = candidate_delay;
end
ITI = R;

BpodSystem.Data.TrialTypes = []; % The trial type of each trial completed will be added here.
BpodSystem.Data.TrialRewarded = []; % The trial type of each trial completed will be added here.
BpodSystem.Data.RewardDelay = [];
BpodSystem.Data.PunishDelay = [];
BpodSystem.Data.ITI = [];
BpodSystem.Data.RunEvents = [];
BpodSystem.Data.RunSpeed = {};
BpodSystem.Data.CurrentTrialRunSpeed = zeros(10000,2);
BpodSystem.Data.CurrentTrialRunEvents = 0;

%% Initialize plots
BpodSystem.ProtocolFigures.SideOutcomePlotFig = figure('Position', [500 200 800 300],'name','Outcome plot','numbertitle','off', 'MenuBar', 'none', 'Resize', 'off');
BpodSystem.GUIHandles.SideOutcomePlot = axes('Position', [.075 .3 .89 .6]);
BpodSystem.ProtocolFigures.LickPlotFig = figure('Position', [600 200 600 200],'name','Licking','numbertitle','off', 'MenuBar', 'none', 'Resize', 'off');
ThreeOutcomePlot(BpodSystem.GUIHandles.SideOutcomePlot,'init',TrialTypes, nTrials);
LickPlot(BpodSystem.GUIHandles.SideOutcomePlot,'init',TrialTypes);
% Set soft code handler to trigger sounds
BpodSystem.SoftCodeHandlerFunction = 'SoftCodeHandler_PlaySoundX';

SF = 192000; % Sound card sampling rate
SinWaveFreq1 = 4000;
sounddata1 = GenerateSineWave(SF, SinWaveFreq1, S.SoundDuration); % Sampling freq (hz), Sine frequency (hz), duration (s)
% sounddata2 = rand(1,S.CueDelay*SF); % white noise
% SinWaveFreq2 = 8000;
% sounddata2 = GenerateSineWave(SF, SinWaveFreq2, S.SoundDuration); % Sampling freq (hz), Sine frequency (hz), duration (s)
SinWaveFreq2 = 12000;
sounddata2 = GenerateSineWave(SF, SinWaveFreq2, S.SoundDuration); % Sampling freq (hz), Sine frequency (hz), duration (s)
% sounddata3 = (rand(1,SF*S.SoundDuration+1)*2) - 1;
% WidthOfFrequencies=1.5; NumberOfFrequencies=7; MeanSoundFreq4 = 6000; SoundRamping=0.2;
% sounddata4 = SoundGenerator(SF, MeanSoundFreq4, WidthOfFrequencies, NumberOfFrequencies, S.SoundDuration, SoundRamping);

% Program sound server
PsychToolboxSoundServer('init')
PsychToolboxSoundServer('Load', 1, 0.03*sounddata1);
PsychToolboxSoundServer('Load', 2, 0.05*sounddata2);
% PsychToolboxSoundServer('Load', 3, 0.8*sounddata3);
% PsychToolboxSoundServer('Load', 3, sounddata3);
% PsychToolboxSoundServer('Load', 4, sounddata4);

%% Main trial loop

T = timer('period',1,'executionmode','fixedrate', 'TimerFcn', @scriptMonitor);%,'taskstoexecute',9999999);
%T.TimerFcn = @scriptMonitor; %@(~,~)scriptMonitor()
T.Period = 1;
T.ExecutionMode = 'fixedRate';
start(T);
autoTimerCleanup = onCleanup(@()delete(timerfind));
%figure,
%grid on,
%xlabel ('Time (s)'), ylabel('Data (8-bit)'),
%axis([0 Tmax+1 -10 300]),
%% Read and plot the data from Arduino
for currentTrial = 1:nTrials
    
    tic % Start timer
    S = BpodParameterGUI('sync', S); % Sync parameters with BpodParameterGUI plugin
    R = GetValveTimes(S.GUI.RewardAmount, [1]);
    RewardValveTime = R; % Update reward amounts
    USDelay = 0; % The delay caused by the unconditioned stimulus. 
    FSDelay = 0; % The difference between the two unconditioned stimuli. 
    RUSD = RewardDelay(currentTrial)+RewardValveTime; % Reward US delay
    PUSD = S.GUI.PunishAmount+PunishDelay(currentTrial); % Punish US delay
    
    switch TrialTypes(currentTrial) % Determine trial-specific state matrix fields
        case 0 % lick trial
            soundID = 1;
            ActionOutcome = 'RewardPre';
            ResponseTime = S.GUI.ResponseTimeGo;
			ActionPort = LickPort;
            ResponseWindow = 'ResponseW';
			if (S.GUI.TrainingLevel <= 2 && rand<S.GUI.AssistProb) %Changed from >= Sara 1/29/19
				%Habituation phase, reward with p=AssistProb.
				Tup_Action = 'AssistRewardPre';
			else
				Tup_Action = 'USSync';
            end
            USDelay = RUSD;
            if RUSD < PUSD
                FSDelay = PUSD-RUSD;
            end
            
		case 1 % run to avoid air puff trial
            soundID = 2;
			ActionPort = RunPort; %Changed from LickPort Sara 1/29/19
			ActionOutcome = 'DelayPre';
            ResponseWindow = 'ResponseW';
			ResponseTime = S.GUI.ResponseTimeNoGo;
			Tup_Action = 'PunishmentPre';
            USDelay = PUSD;
            if RUSD > PUSD
                FSDelay = RUSD-PUSD;
            end
        
    end
    
    sma = NewStateMatrix(); % Assemble state matrix
    tic;
 % unlearning and active avoidance
    % BNC1: imaging trigger
    % BNC2: ChR2 stimulation trigger
    timerTimeout = S.GUI.BaselineTime+ResponseTime+S.CueDelay;
    sma = SetGlobalTimer(sma, 1,timerTimeout);
    %Global timer for synchronising events. Timer1: Sound, Timer2: Actions. 
    if S.ImagingFlag 
        sma = SetGlobalTimer(sma,  'TimerID', 1, 'Duration',20, 'OnsetDelay', 0, 'Channel', 'Wire1');

        sma = AddState(sma, 'Name', 'TrialStart', ...%1
            'Timer', S.GUI.BaselineTime,... %3 seconds
            'StateChangeConditions', {'Tup', 'StimulusDeliver'},...
            'OutputActions', {'GlobalTimerTrig', 1});
    else
        sma = AddState(sma, 'Name', 'TrialStart', ...%1
            'Timer', S.GUI.BaselineTime,...
            'StateChangeConditions', {'Tup', 'StimulusDeliver'},...
            'OutputActions', {'GlobalTimerTrig', 1});
    end

    sma = AddState(sma, 'Name', 'StimulusDeliver', ...%2
        'Timer', S.SoundDuration,...
        'StateChangeConditions', {'Tup', 'CueDelay'},...
        'OutputActions', {'SoftCode', soundID});
    sma = AddState(sma, 'Name', 'CueDelay', ...%3
        'Timer', S.CueDelay,... %Time between sound and response window. 0
        'StateChangeConditions', {'Tup', ResponseWindow},...
        'OutputActions', {});
    sma = AddState(sma, 'Name', 'ResponseW', ...%4
        'Timer', ResponseTime,...
        'StateChangeConditions', {ActionPort, ActionOutcome, 'Tup', Tup_Action},...
        'OutputActions', {});
    sma = AddState(sma, 'Name', 'AssistRewardPre', ...%5
        'Timer', 0,...
        'StateChangeConditions', {'Tup', 'AssistReward'},...
        'OutputActions', {});
    sma = AddState(sma, 'Name', 'RewardPre', ...%6
        'Timer', ResponseTime,...
        'StateChangeConditions', {'Tup', 'Reward','GlobalTimer1_End', 'Reward'},...
        'OutputActions', {});
    sma = AddState(sma, 'Name', 'PunishmentPre', ...%7
        'Timer', ResponseTime,...
        'StateChangeConditions', {'Tup', 'Punishment','GlobalTimer1_End', 'Punishment'},...
        'OutputActions', {});
    sma = AddState(sma, 'Name', 'DelayPre', ...%8
        'Timer', ResponseTime,...
        'StateChangeConditions', {'Tup', 'USSync','GlobalTimer1_End', 'USSync'},...
        'OutputActions', {});
    sma = AddState(sma, 'Name', 'USSync', ...%9 %The delay from US, NO US
        'Timer', USDelay,...
        'StateChangeConditions', {'Tup', 'FinalSync'},...
        'OutputActions', {});
    sma = AddState(sma, 'Name', 'AssistReward', ...%9
        'Timer', RewardDelay(currentTrial),...
        'StateChangeConditions', {'Tup', 'DeliverReward'},...
        'OutputActions', {});
    sma = AddState(sma, 'Name', 'Reward', ...%10
        'Timer', RewardDelay(currentTrial),...
        'StateChangeConditions', {'Tup', 'DeliverReward'},...
        'OutputActions', {});
    sma = AddState(sma, 'Name', 'Punishment', ...%11
        'Timer', PunishDelay(currentTrial),...
        'StateChangeConditions', {'Tup', 'DeliverPunishment'},...
        'OutputActions', {});
    sma = AddState(sma, 'Name', 'DeliverPunishment', ...%12
        'Timer', S.GUI.PunishAmount,...
        'StateChangeConditions', {'Tup', 'FinalSync'},...
        'OutputActions', {'ValveState', PunishValveState});
    sma = AddState(sma, 'Name', 'DeliverReward', ...%13
        'Timer', RewardValveTime,...
        'StateChangeConditions', {'Tup', 'FinalSync'},...
        'OutputActions', {'ValveState', RewardValveState});
    sma = AddState(sma, 'Name', 'FinalSync', ...%14
        'Timer', FSDelay,...
        'StateChangeConditions', {'Tup', 'EndTime'},...
        'OutputActions', {});
    sma = AddState(sma, 'Name', 'EndTime', ...%15
        'Timer', S.GUI.BaselineTime,...
        'StateChangeConditions', {'Tup', 'ITI', 'GlobalTimer1_End', 'ITI'},...
        'OutputActions', {});
    sma = AddState(sma, 'Name', 'ITI', ...%16
        'Timer', ITI(currentTrial),...
        'StateChangeConditions', {'Tup', 'exit'},...
        'OutputActions', {});

    BpodSystem.ProtocolFigures.StartTime = 0;
	BpodSystem.ProtocolFigures.CurrentTrialStartTime = datenum(datetime)*86400-BpodSystem.ProtocolFigures.StartTime;
    BpodSystem.Data.CurrentTrialRunSpeed = zeros(10000,2);
    BpodSystem.Data.CurrentTrialRunEvents = 0;
    SendStateMatrix(sma);
    RawEvents = RunStateMatrix;
	BpodSystem.Data.CurrentTrialLickTimes = [];
    if ~isempty(fieldnames(RawEvents)) % If trial data was returned
		%disp(RawEvents);
		RE = RawEvents.Events;
        %disp(RE);
		RES = RawEvents.States;
        %disp(RES);
		REST = RawEvents.StateTimestamps(2:end);
		%disp(REST);
		RET = RawEvents.EventTimestamps;
        %disp(RET);
		%Find if any timestamps contain a reward deliver (event 13) and
		%record that as the current trial reward delivery timestamp.
		RESR = (RES==13);
		%disp(RESR);
		BpodSystem.Data.CurrentTrialRewardTime = round(BpodSystem.ProtocolFigures.CurrentTrialStartTime+sum(RESR.*REST));
		%Filter the timestamps for licks (In3Up, 53/30 depending on computer) 
		%and turn them into a list.
		REE = (RE==32);
		BpodSystem.Data.CurrentTrialLickTimes = round(nonzeros(REE.*RET)+BpodSystem.ProtocolFigures.CurrentTrialStartTime);
        %disp(BpodSystem.Data.CurrentTrialLickTimes)
        BpodSystem.Data = AddTrialEvents(BpodSystem.Data,RawEvents); % Computes trial events from raw data
        BpodSystem.Data.TrialSettings(currentTrial) = S; % Adds the settings used for the current trial to the Data struct (to be saved after the trial ends)
        BpodSystem.Data.TrialTypes(currentTrial) = TrialTypes(currentTrial); % Adds the trial type of the current trial to data
        BpodSystem.Data.RewardDelay(currentTrial) = RewardDelay(currentTrial);
        BpodSystem.Data.PunishDelay(currentTrial) = PunishDelay(currentTrial);
        BpodSystem.Data.ITI(currentTrial) = ITI(currentTrial);
        
        %Outcome
        if ~isnan(BpodSystem.Data.RawEvents.Trial{currentTrial}.States.AssistReward(1))
			BpodSystem.Data.Outcomes(currentTrial) = 3; %Receives reward
		elseif ~isnan(BpodSystem.Data.RawEvents.Trial{currentTrial}.States.Reward(1))
			BpodSystem.Data.Outcomes(currentTrial) = 1; %Receives reward
%        elseif ~isnan(BpodSystem.Data.RawEvents.Trial{currentTrial}.States.Punishment(1))
%            BpodSystem.Data.Outcomes(currentTrial) = 0; %Receives punishement
        elseif TrialTypes(currentTrial)==1
            BpodSystem.Data.Outcomes(currentTrial) = -1; %Ignored go
        else
            BpodSystem.Data.Outcomes(currentTrial) = 2; %Ignored no-go
        end
        
        %Save the run timings and speeds
        BpodSystem.Data.RunEvents(currentTrial) = BpodSystem.Data.CurrentTrialRunEvents;
        BpodSystem.Data.RunSpeed{currentTrial} = BpodSystem.Data.CurrentTrialRunSpeed;
        
        UpdateTotalRewardDisplay(S.GUI.RewardAmount, currentTrial);
        
%        UpdateThreeOutcomePlot(TrialTypes, BpodSystem.Data); %Sara
        SaveBpodSessionData; % Saves the field BpodSystem.Data to the current data file
    end
    HandlePauseCondition; % Checks to see if the protocol is paused. If so, waits until user resumes.
    if BpodSystem.Status.BeingUsed == 0
        delete(T); %added by Sara 1/29/19
        fclose(BPAS);
        close all;
        return
    end

end

function UpdateThreeOutcomePlot(~, Data)
	Outcomes = zeros(1,Data.nTrials);
	for x = 1:Data.nTrials
		if ~isnan(Data.RawEvents.Trial{x}.States.AssistReward(1))
			Outcomes(x) = 3;
		elseif ~isnan(Data.RawEvents.Trial{x}.States.Reward(1))
			Outcomes(x) = 1;
		elseif ~isnan(Data.RawEvents.Trial{x}.States.Punishment(1))
			Outcomes(x) = 0;
		elseif BpodSystem.Data.TrialTypes(x)==1
			Outcomes(x) = -1;
		else
			Outcomes(x) = 2;
		end
    end
    ThreeOutcomePlot(BpodSystem.GUIHandles.SideOutcomePlot,'update',Data.nTrials+1,TrialTypes,Outcomes);
end

end

function UpdateTotalRewardDisplay(RewardAmount, currentTrial)
% If rewarded based on the state data, update the TotalRewardDisplay
global BpodSystem
    HasReward = 0;
    if (~isnan(BpodSystem.Data.RawEvents.Trial{currentTrial}.States.DeliverReward(1)))
        HasReward = 1;
    end
    TotalRewardDisplay('add', RewardAmount*HasReward);
end

%{
function scriptMonitor(~,~)
	%Runs every second to monitor background events. 
	global BpodSystem
    global S
    %Reads the data from the Arduino serial port. 
    BPAS = BpodSystem.PluginObjects.ardSerial;
    dataSize = get(BPAS,'BytesAvailable');
    
    if (dataSize>0)
        inASCII = fread(BPAS,dataSize);
        inData = transpose(char(inASCII));
        inData = strsplit(inData);
        inData = inData(1:end-1); % Remove the last newline from the array
        
        for k=1:length(inData) % Convert the array to run speed / run distance and write it to the run speed array. 
            BpodSystem.Data.CurrentTrialRunSpeed(k+BpodSystem.Data.CurrentTrialRunEvents,1:2) = str2double(strsplit(inData{k},'A')) * S.wheelMult;
        end
        BpodSystem.Data.CurrentTrialRunEvents = BpodSystem.Data.CurrentTrialRunEvents + length(inData);
        assignin('base', 'inString', BpodSystem.Data.CurrentTrialRunEvents);
    end
    TotalRewardDisplay('update');
end
%}
function scriptMonitor(~,~)
	%Runs every second to monitor background events.
    global currentTrial
    global speed
   % figure(speed);
    hold on;
    global i
	global BpodSystem
    global S
    %global listSpeed
    %Reads the data from the Arduino serial port. 
    BPAS = BpodSystem.PluginObjects.ardSerial;
    dataSize = get(BPAS,'BytesAvailable');
    
    if (dataSize>0)
        inASCII = fread(BPAS,dataSize);
        inData = transpose(char(inASCII));
        inData = strsplit(inData);
        inData = inData(1:end-1); % Remove the last newline from the array
        
        for k=1:length(inData) % Convert the array to run speed / run distance and write it to the run speed array. 
            BpodSystem.Data.CurrentTrialRunSpeed(k+BpodSystem.Data.CurrentTrialRunEvents,1:2) = str2double(strsplit(inData{k},'A')) * S.wheelMult;
        end
        BpodSystem.Data.CurrentTrialRunEvents = BpodSystem.Data.CurrentTrialRunEvents + length(inData);
        assignin('base', 'inString', BpodSystem.Data.CurrentTrialRunEvents);
    end
    TotalRewardDisplay('update');
	%% Read buffer data

	%% Read time stamp
	% If reading faster than sampling rate, force sampling time.
	% If reading slower than sampling rate, nothing can be done. Consider
	% decreasing the set sampling time Ts
	%t(i) = toc;
	%if i > 1
%		T = toc - t(i-1);
%		while T < Ts%
%			T = toc - t(i-1);
%		end
%	end
    Tmax = currentTrial;
	
	%% Plot live data
	%if currentTrial > 2
    if i > 2
        
       % axis([0 20 0 300]);
        %PrePreTrial = sum(cell2mat(BpodSystem.Data.RunSpeed(currentTrial-2)));
        %PreTrial = sum(cell2mat(BpodSystem.Data.RunSpeed(currentTrial - 1)));
        PreTrial = BpodSystem.Data.CurrentTrialRunSpeed(:,1);
      %  listSpeed(i) = sum(PreTrial);
        %line([currentTrial-2 currentTrial - 1],[PrePreTrial(1) PreTrial(1)])
		%line([i-2 i-1],[PrePreTrial(1) PreTrial(1)])
        
      %  line([i i + 1], [listSpeed(i - 1) - listSpeed(i - 2), listSpeed(i) - listSpeed(i - 1)]);
       % drawnow
    end
    i = i + 1;
clear BpodSystem;
clear S;
%clear speed;
clear t;
clear i;
clear currentTrial;

end



%left column looks like ticks moved? Right column looks like cumulative
%ticks

%	S.wheelCirc = 46; % Circumference of the wheel (cm)
%	S.wheelTicks = 1024; % Number of ticks recorded by the wheel per rotation.
%	S.wheelMult = S.wheelCirc/S.wheelTicks; % Distance per tick (cm)

